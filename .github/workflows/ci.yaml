name: CI
on:
  workflow_dispatch: {}
jobs:
  system_info:
    name: System Info
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
    steps:
      - name: Run checkout
        uses: actions/checkout@v4
      
      - name: Set build dir
        id: set_build_dir
        shell: pwsh
        run: |
          $build_dir = Join-Path "${{ github.workspace }}" "build"
          
          if ($build_dir.Contains(" ")) {
            Write-Warning "CMake working dir($build_dir) contains space"
          }
          
          if (-not (Test-Path -Path $build_dir)) {
            New-Item -Path $build_dir -ItemType "Directory"
          }
          
          "build_dir=$build_dir" |
            Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
      
      - name: CMake Generate
        shell: pwsh
        run: |
          $build_dir = ${{ steps.set_build_dir.outputs.build_dir }}
          
          Push-Location "$build_dir"
          
          if (${{ matrix.os }} -eq "windows-latest") {
            cmake -S ..
          } else {
            cmake -S -DCMAKE_CXX_COMPILER=g++ ..
          }
          
          Pop-Location
      
      - name: Run CTest
        shell: pwsh
        run: |
          $build_dir = ${{ steps.set_build_dir.outputs.build_dir }}
          
          Push-Location "$build_dir"
          
          if (${{ matrix.os }} -eq "windows-latest") {
            ctest --build-and-test ../ ./ --build-generator "Visual Studio 17 2022" -C Debug
          } else {
            ctest --build-and-test ../ ./ --build-generator "Unix Makefiles"
          }
          
          Pop-Location
  
  ci:
    name: CI
    runs-on: windows-latest
    steps:
      - name: Run checkout
        uses: actions/checkout@v4
      
      - name: CMake Generate
        shell: pwsh
        run: |
          
          Import-Module VSSetup
          
          $vs_instance = Get-VSSetupInstance | Select-VSSetupInstance -Latest
          $vs_dev_shell = Join-Path $vs_instance.InstallationPath "Common7\Tools\Launch-VsDevShell.ps1"
          if (-not (Test-Path -Path $vs_dev_shell)) {
            Write-Error "vs_dev_shell $vs_dev_shell is invalid."
          }
          & $vs_dev_shell -Arch amd64
          cl.exe
#         $vs = Get-VSSetupInstance | Where-Object {
#           $_.InstallationPath.Contains("Launch-VsDevShell.ps1")
#         }
#         $vs | Foreach-Object {
#           Write-Host "Found Launch-VsDevShell.ps1 for Visual Studio $($_.DisplayName) ($($_.InstallationVersion))"
#           Write-Host "Path: $_.InstallationPath"
#         }
#         
#         & ($vs[0]).InstallationPath -Arch x64
#         cl.exe
          
          
#      - name: CMake Build
#        shell: pwsh
#        run: |
#          
