name: CI
on:
  workflow_dispatch:
    inputs:
      build_debug:
        description: 'Build debug version'
        required: false
        type: boolean
        default: true
      build_release:
        description: 'Build release version'
        required: false
        type: boolean
        default: false
defaults:
  run:
    shell: pwsh
jobs:
  setup-matrix:
    runs-on: windows-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Set Matrix
        id: set-matrix
        run: |
          $matrix = [System.Collections.Generic.List[object]]::new()
          if ("${{ inputs.build_debug }}" -eq "true") { $matrix.Add("debug") }
          if ("${{ inputs.build_release }}" -eq "true") { $matrix.Add("release") }
          $res = $matrix | ConvertTo-Json -AsArray -Compress
          "matrix=$res" |
            Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
  
  cmake:
    name: CMake
    needs: setup-matrix
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        compiler: [msvc, gcc] #, clang]
        build_type: ${{ fromJson(needs.setup-matrix.outputs.matrix) }}
        exclude:
          - os: macos-latest
            compiler: msvc
          - os: ubuntu-latest
            compiler: msvc
    
    steps:
      - name: Run checkout
        uses: actions/checkout@v4
      
#     - name: Set build dir
#       id: set_build_dir
#       run: |
#         $build_dir = (Join-Path "${{ github.workspace }}" "build").ToString()
#         
#         if ($build_dir.Contains(" ")) {
#           Write-Warning "CMake working dir($build_dir) contains space"
#         }
#         
#         "build_dir=$build_dir" |
#           Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
      
      - name: CMake Workflow
        run: |
          $preset_array = @(
            "${{ matrix.compiler }}",
            "${{ matrix.build_type }}"
          )
          $preset = $preset_array -join "_"
          
          cmake --workflow --preset "$preset"
          
      - name: Cache MarkdownPS module
        if: matrix.os != 'windows-latest'
        id: cache-module
        uses: actions/cache@v4
        with:
          path: ${{ $HOME/.local/share/powershell/Modules }}
          key: markdownps-${{ runner.os }}
      
      - name: Install MarkdownPS
        if: ${{ matrix.os != 'windows-latest' && steps.cache-module.outputs.cache-hit != 'true'}}
        shell: pwsh
        run: |
          Install-Module MarkdownPS `
            -Scope CurrentUser `
            -Force `
            -AllowClobber `
            -Repository PSGallery
          
      - name: Gather result of CMake detecting
        id: cmake_detection
        run: |
          Import-Module MarkdownPS
          $markdown = ""
          
          $build_dir = "build"
          if ("${{ matrix.compiler }}" -ne "msvc") {
            if ("${{ matrix.build_type }}" -eq "debug") { $build_dir = "build/Debug" }
            else { $build_dir = "build/Release" }
          }
          
          $detect_result = Get-Content -Path $build_dir/cmake_detect.json -Raw -Encoding utf8 | ConvertFrom-Json
          
          # Format JSON
          $markdown = ""
          $emoji_yes = ":heavy_check_mark:"
          $emoji_no = ":x:"
          
          # CMake Detection
          
          $markdown += New-MDParagraph -Lines "CMake Detection"
          $markdown += $detect_result.cmake_variables.PSObject.Properties |
            Select-Object Name, Value |
            Sort-Object -Property name |
            New-MDTable -Shrink
          $markdown += New-MDParagraph -Lines ""
          
          # Compiler Flags
          
          $markdown += New-MDParagraph -Lines "Compiler Flags"
          $markdown += $detect_result.compiler_flags.PSObject.Properties |
            Select-Object Name, Value |
            Foreach-Object {
              [PSCustomObject]@{
                Name = $_.Name
                Value = if ( $_.Value.Length -gt 0 ) { "$emoji_yes" } else { "$emoji_no" }
              }
            } |
            Sort-Object -Property name |
            New-MDTable -Shrink
          $markdown += New-MDParagraph -Lines ""
          
          # C++ Features
          
          $markdown += New-MDParagraph -Lines "C++ Features"
          $markdown += $detect_result.cpp_features.PSObject.Properties |
            Select-Object Name, Value |
            Foreach-Object {
              [PSCustomObject]@{
                Name = $_.Name
                Value = if ( $_.Value.Length -gt 0 ) { "$emoji_yes" } else { "$emoji_no" }
              }
            } |
            Sort-Object -Property name |
            New-MDTable -Shrink
          $markdown += New-MDParagraph -Lines ""
          
          # Headers
          
          $markdown += New-MDParagraph -Lines "Headers"
          $markdown += $detect_result.headers.PSObject.Properties |
            Select-Object Name, Value |
            Foreach-Object {
              [PSCustomObject]@{
                Name = $_.Name
                Value = if ( $_.Value.Length -gt 0 ) { "$emoji_yes" } else { "$emoji_no" }
              }
            } |
            Sort-Object -Property name |
            New-MDTable -Shrink
          $markdown += New-MDParagraph -Lines ""
          
          $filename_array = @(
            "doc/auto_gen/cmake_detection",
            "${{ runner.os }}",
            "${{ runner.arch }}",
            "${{ matrix.compiler }}",
            "${{ matrix.build_type }}"
          )
          $filename = $filename_array -join "_"
          "result_file=$filename" |
                Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
          
          $filename += ".md"
          $markdown | Out-File -FilePath "$filename" -Force -Encoding utf8
          
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: cmake_detection_${{steps.cmake_detection.outputs.result_file}}_result_file
          path: ${{steps.cmake_detection.outputs.result_file}}.md