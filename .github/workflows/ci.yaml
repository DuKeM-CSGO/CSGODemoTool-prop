name: CI
on:
  workflow_dispatch:
    inputs:
      build_debug:
        description: 'Build debug version'
        required: false
        type: boolean
        default: true
      build_release:
        description: 'Build release version'
        required: false
        type: boolean
        default: false
jobs:
  setup-matrix:
    runs-on: windows-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Set Matrix
        id: set-matrix
        shell: pwsh
        run: |
          $matrix = [System.Collections.Generic.List[object]]::new()
          if ("${{ inputs.build_debug }}" -eq "true") { $matrix.Add("Debug") }
          if ("${{ inputs.build_release }}" -eq "true") { $matrix.Add("Release") }
          $res = $matrix | ConvertTo-Json -AsArray -Compress
          Write-Host "matrix=$res"
          "matrix=$res" |
            Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
  
  system_info:
    name: System Info
    needs: setup-matrix
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        cpp_compiler: [g++, clang++]
        build_type: ${{ fromJson(needs.setup-matrix.outputs.matrix) }}
        include:
          - os: windows-latest
            cpp_compiler: cl
            c_compiler: cl
          - cpp_compiler: g++
            c_compiler: gcc
          - cpp_compiler: clang++
            c_compiler: clang
    steps:
      - name: Run checkout
        uses: actions/checkout@v4
      
      - name: Set build dir
        id: set_build_dir
        shell: pwsh
        run: |
          $build_dir = (Join-Path "${{ github.workspace }}" "build").ToString()
          
          if ($build_dir.Contains(" ")) {
            Write-Warning "CMake working dir($build_dir) contains space"
          }
          
          "build_dir=$build_dir" |
            Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
      
      - name: CMake Generate For MSVC
        if: matrix.cpp_compiler == 'cl'
        shell: pwsh
        run: |
          $build_dir = "${{ steps.set_build_dir.outputs.build_dir }}"
          
          if (-not (Test-Path -Path $build_dir)) {
            New-Item -Path $build_dir -ItemType "Directory" | Out-Null
          }
          
          Push-Location "$build_dir"
          
          cmake -S ..
          
          Pop-Location
      
      - name: CMake Generate For GCC && Clang
        if: matrix.cpp_compiler != 'cl'
        shell: pwsh
        run: |
          $build_type = "${{ matrix.build_type }}"
          $build_dir = (Join-Path "${{ steps.set_build_dir.outputs.build_dir }}" "$build_type").ToString()
          
          if (-not (Test-Path -Path $build_dir)) {
            New-Item -Path $build_dir -ItemType "Directory" | Out-Null
          }
          
          Push-Location "$build_dir"
          
          cmake -S ../../ -G "Unix Makefiles" -DCMAKE_CXX_COMPILER="${{ matrix.cpp_compiler }}" -DCMAKE_C_COMPILER="${{ matrix.c_compiler }}" -DCMAKE_BUILD_TYPE="$build_type"
          
          Pop-Location
      
#     - name: Run CTest
#       shell: pwsh
#       run: |
#         $build_dir = "${{ steps.set_build_dir.outputs.build_dir }}"
#         
#         if (-not (Test-Path -Path $build_dir)) {
#           New-Item -Path $build_dir -ItemType "Directory" | Out-Null
#         }
#         
#         Push-Location "$build_dir"
#         
#         if ("${{ matrix.os }}" -eq "windows-latest") {
#           ctest --build-and-test ../ ./ --build-generator "Visual Studio 17 2022" -C Debug
#         } else {
#           ctest --build-and-test ../ ./ --build-generator "Unix Makefiles"
#         }
#         
#         Pop-Location
  
  ci:
    name: CI
    runs-on: windows-latest
    steps:
      - name: Run checkout
        uses: actions/checkout@v4
      
      - name: CMake Generate
        shell: pwsh
        run: |
          g++ --help=target
          clang++ --help
          
          Import-Module VSSetup
          
          $vs_instance = Get-VSSetupInstance | Select-VSSetupInstance -Latest
          $vs_dev_shell = Join-Path $vs_instance.InstallationPath "Common7\Tools\Launch-VsDevShell.ps1"
          if (-not (Test-Path -Path $vs_dev_shell)) {
            Write-Error "vs_dev_shell $vs_dev_shell is invalid."
          }
          & $vs_dev_shell -Arch amd64
          cl.exe
#         $vs = Get-VSSetupInstance | Where-Object {
#           $_.InstallationPath.Contains("Launch-VsDevShell.ps1")
#         }
#         $vs | Foreach-Object {
#           Write-Host "Found Launch-VsDevShell.ps1 for Visual Studio $($_.DisplayName) ($($_.InstallationVersion))"
#           Write-Host "Path: $_.InstallationPath"
#         }
#         
#         & ($vs[0]).InstallationPath -Arch x64
#         cl.exe
          
          
#      - name: CMake Build
#        shell: pwsh
#        run: |
#          
