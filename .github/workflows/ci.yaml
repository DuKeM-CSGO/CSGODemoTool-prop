name: Update Readme
on:
  workflow_dispatch: {}
jobs:
  readme:
    name: Update Readme
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
        
      - name: Cache PSWriteHTML module
        id: cache-module
        uses: actions/cache@v4.2.3
        with:
          path: ${{ env.USERPROFILE }}\Documents\PowerShell\Modules
          key: pswritehtml-v1-windows
      
      - name: Install PSWriteHTML (if cache miss)
        if: steps.cache-module.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          Install-Module PSWriteHTML `
            -Scope CurrentUser `
            -Force `
            -AllowClobber `
            -Repository PSGallery
            
      - name: Check Third-party Repo
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $result = [System.Collections.Generic.List[object]]@()
          
          # TODO: Migration
          $repolist = @(
            @{repo_name = "abseil/abseil-cpp"; display_name="abseil"},
            @{repo_name = "weidai11/cryptopp"},
            @{repo_name = "microsoft/Detours"; display_name="detours"},
            @{repo_name = "gperftools/gperftools"},
            @{repo_name = "protocolbuffers/protobuf"},
            @{repo_name = "google/snappy"},
            @{repo_name = "NVIDIA/stdexec"},
            @{repo_name = "hackers-painters/katana-parser" ; display_name="katana_parser"},
            @{repo_name = "nlohmann/json"; display_name="nlohmann_json"},
            @{repo_name = "SteamDatabase/GameTracking-CSGO"; display_name="gametracking_csgo"},
            @{repo_name = "microsoft/proxy"; display_name="proxy3"},
            @{repo_name = "microsoft/stl"; display_name="microsoft_stl"},
            @{repo_name = "alibaba/yalantinglibs"},
            @{repo_name = "AcademySoftwareFoundation/openexr"}
          )
          
          $repolist | ForEach-Object {
            $repo = $_.repo_name
            if ((-not $_.ContainsKey("display_name")) -or ($_.display_name -eq "")) {
               $_.display_name = ($_.repo_name -split '/')[1]
            }
            
            $repo_info = gh repo view $repo --json latestRelease,licenseInfo | ConvertFrom-Json
            $release = $repo_info.latestRelease
            $license = $repo_info.licenseInfo.key
            if ($license -eq "other") {
              $license = ""
            }
            
            $result.Add([ordered]@{
              display_name = $_.display_name;
              repo_name = $_.repo_name;
              tag_name = $release.tagName;
              publish_time = $release.publishedAt;
              license = $license
            })
          }

          $result | Sort-Object -Property display_name | ConvertTo-Json | Out-File -FilePath result.json

      - name: Format to markdown
        run: |
          Import-Module MarkdownPS, PSWriteHTML
          
          $content = Get-Content -Path result.json | ConvertFrom-Json
          
          New-HTML -Title "Employee Data" -FilePath output.html {
            New-HTMLTable -Data $content
          }
          Get-Content output.html
