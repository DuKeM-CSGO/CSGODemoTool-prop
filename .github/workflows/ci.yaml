name: Update Readme
on:
  workflow_dispatch: {}
jobs:
  readme:
    name: Update Readme
    runs-on: windows-latest
    steps:
      - name: Check Third-party Repo
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $result = [System.Collections.Generic.List[object]]@()
          
          # TODO: Migration
          $repolist = @(
            @{repo_name = "abseil/abseil-cpp"; display_name="abseil"},
            @{repo_name = "weidai11/cryptopp"},
            @{repo_name = "microsoft/Detours"; display_name="detours"},
            @{repo_name = "gperftools/gperftools"},
            @{repo_name = "protocolbuffers/protobuf"},
            @{repo_name = "google/snappy"},
            @{repo_name = "NVIDIA/stdexec"},
            @{repo_name = "hackers-painters/katana-parser" ; display_name="katana_parser"},
            @{repo_name = "nlohmann/json"; display_name="nlohmann_json"},
            @{repo_name = "SteamDatabase/GameTracking-CSGO"; display_name="gametracking_csgo"},
            @{repo_name = "microsoft/proxy"; display_name="proxy3"},
            @{repo_name = "microsoft/stl"; display_name="microsoft_stl"},
            @{repo_name = "alibaba/yalantinglibs"}
          )
          
          $repolist | ForEach-Object {
            $repo = $_.repo_name
            if ((-not $_.ContainsKey("display_name")) -or ($_.display_name -eq "")) {
               $_.display_name = ($_.repo_name -split '/')[1]
            }
            $repo_info = gh repo view $repo --json latestRelease,licenseInfo | ConvertFrom-Json
            $release = $repo_info.latestRelease
            $result.Add([ordered]@{
              display_name = $_.display_name;
              repo_name = $_.repo_name;
              tag_name = $release.tagName;
              publish_time = $release.publishedAt;
              license = $repo_info.licenseInfo.key
            })
          }

          $result | Sort-Object -Property display_name | Foreach-Object{
            Write-Host $_
          }
