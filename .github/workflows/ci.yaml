name: CI
on:
  workflow_dispatch:
    inputs:
      build_debug:
        description: 'Build debug version'
        required: false
        type: boolean
        default: true
      build_release:
        description: 'Build release version'
        required: false
        type: boolean
        default: false
defaults:
  run:
    shell: pwsh
jobs:
  cmake:
    name: CMake
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        compiler: [msvc, gcc, clang]
        exclude:
          - os: macos-latest
            compiler: msvc
          - os: ubuntu-latest
            compiler: msvc
    
    steps:
      - name: Run checkout
        uses: actions/checkout@v4
      
      - name: CMake Workflow
        run: |
          $preset_array = @(
            "${{ matrix.compiler }}"
          )
          if (("${{ matrix.compiler }}" -eq "gcc") &&
              ("${{ matrix.os }}" -eq "macos-latest")) {
            $preset_array.Add("macos")
          }
          $preset_base = $preset_array -join "_"
          
          if ("${{ inputs.build_debug }}" -eq "true") {
            $preset = $preset_base + "_debug"
            cmake --workflow --preset "$preset"
          }
          if ("${{ inputs.build_release }}" -eq "true") {
            $preset = $preset_base + "_release"
            cmake --workflow --preset "$preset"
          }
          
          if (("${{ inputs.build_debug }}" -ne "true") &&
              ("${{ inputs.build_release }}" -ne "true")) {
            $preset = $preset_base + "_configure"
            cmake --workflow --preset "$preset"
          }
      
      - name: Gather result of CMake detecting
        id: cmake_detection
        run: |
          $detect_result = "build/cmake_detect.json"
          
          $filename_array = @(
            "cmake_detection",
            "${{ runner.os }}",
            "${{ runner.arch }}",
            "${{ matrix.compiler }}"
          )
          $filename_short = ($filename_array -join "_").ToLower()
          "filename_short=$filename_short" |
                Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
          
          $filename_full = "doc/auto_gen/" + $filename_short + ".json"
          "filename_full=$filename_full" |
                Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
          
          Move-Item -Path $detect_result -Destination $filename_full
          
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{steps.cmake_detection.outputs.filename_short}}_result_file
          path: ${{steps.cmake_detection.outputs.filename_full}}
  gather_cmake_detection:
    name: Gather CMake Detection
    needs: cmake
    runs-on: windows-latest
    steps: 
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          pattern: '*_result_file'
          path: doc/auto_gen
          merge-multiple: true
      
      - name: Delete artifact
        uses: GeekyEggo/delete-artifact@v5
        with:
          name: '*_result_file'
      
#     - name: Install MarkdownPS
#       if: ${{ matrix.os != 'windows-latest' && steps.cache_module.outputs.cache-hit != 'true'}}
#       shell: pwsh
#       run: |
#         Install-Module MarkdownPS `
#           -Scope CurrentUser `
#           -Force `
#           -AllowClobber `
#           -Repository PSGallery
#     
#     - name: Find PWSH Module Dir(Windows)
#       if: matrix.os == 'windows-latest'
#       run: |
#         $pwsh_module_dir = [Environment]::GetFolderPath('MyDocuments') + "/WindowsPowerShell/Modules"
#         "pwsh_module_dir=$pwsh_module_dir" |
#               Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
#     
#     - name: Find PWSH Module Dir(Ubuntu/macOS)
#       if: matrix.os != 'windows-latest'
#       id: pwsh_module_dir
#       run: |
#         $pwsh_module_dir = $(Resolve-Path ~/.local/share/powershell/Modules)
#         "pwsh_module_dir=$pwsh_module_dir" |
#               Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
#         
#     - name: Cache MarkdownPS module
#       if: matrix.os != 'windows-latest'
#       id: cache_module
#       uses: actions/cache@v4
#       with:
#         path: |
#           ${{ steps.pwsh_module_dir.outputs.pwsh_module_dir }}/MarkdownPS
#           ${{ steps.pwsh_module_dir.outputs.pwsh_module_dir }}/*
#         key: markdownps-${{ runner.os }}-${{ hashFiles('**/MarkdownPS.psd1') }}
      
      - name: Merge data
        run: |
          $emoji_empty = ":wavy_dash:"
          $emoji_yes = ":heavy_check_mark:"
          $emoji_no = ":x:"
          
          $result_template = [ordered]@{}
          Get-ChildItem "doc/auto_gen" -File |
            Select-Object Name |
            Foreach-Object {
              $file_name = [System.IO.Path]::GetFileNameWithoutExtension($_.Name).Substring("cmake_detection_".Length)
              $result_template[$file_name] = "$emoji_empty"
            }
          
          # $json_result structure:
          # content name - key - file name - value
          # cpp_features - __cpp_modules - macos_arm64 - 0
          
          $json_result = @{}
          Get-ChildItem "doc/auto_gen" -File |
            Select-Object FullName, Name |
            Foreach-Object {
              # "cmake_detection_win_debug.json" -> "win_debug"
              $file_name = [System.IO.Path]::GetFileNameWithoutExtension($_.Name).Substring("cmake_detection_".Length)
              
              $json_file = Get-Content -Path $_.FullName -Raw -Encoding utf8 | ConvertFrom-Json
              $json_file.PSObject.Properties |
                Select-Object Name, Value |
                Foreach-Object {
                  $content_name = $_.Value.display_name
                  
                  if (-not $json_result.ContainsKey($content_name)){
                    $json_result[$content_name] = @{}
                  }
                  
                  $value_type = $_.Value.type
                  
                  $_.Value.values.PSObject.Properties |
                    Select-Object Name, Value |
                    Foreach-Object {
                      if (-not $json_result[$content_name].ContainsKey($_.Name)){
                        $new = [ordered]@{}
                        $result_template.GetEnumerator() |
                          Foreach-Object{
                            $new[$_.Key] = $_.Value
                          }
                        $json_result[$content_name][$_.Name] = $new
                      }
                      
                      $value = $_.Value
                      if ($value_type -eq "bool") {
                        $value = if ( $_.Value.Length -gt 0 ) { "$emoji_yes" } else { "$emoji_no" }
                      }
                      
                      #Write-Host "Original: ", $_.Value, "Type: ", $value_type, "Key: ", $_.Name, "Workflow: ", $file_name, "Result: ", $value
                      
                      $json_result[$content_name][$_.Name][$file_name] = $value
                    }
                }
            }
          
          # Generate Github Flavored Markdown
          
          Import-Module MarkdownPS
          
          $result_columns = [ordered]@{ "Name" = "left" }
          $result_template.GetEnumerator() |
            Sort-Object -Property Name |
            ForEach-Object {
              $result_columns[$_.Name] = "center"
            } |
            Out-Null
          
          $markdown = New-MDHeader "CMake Detection" -Level 2
          $json_result.Keys |
            Sort-Object |
            Foreach-Object {
              $markdown += New-MDParagraph -Lines "<details open>"
              $summary = "<summary>" + $_ + "</summary>"
              $markdown += New-MDParagraph -Lines $summary
              $markdown += New-MDParagraph -Lines ""
              
              $content_original = $json_result[$_]
              $content_processed = [System.Collections.Generic.List[System.Collections.Specialized.OrderedDictionary]]::new()
              
              $content_original.Keys |
                Foreach-Object {
                  $map = [ordered]@{ Name = $_ }
                  $key = $content_original[$_]
                  $key.Keys |
                    Foreach-Object {
                      $map[$_] = $key[$_]
                    }
                  $content_processed.Add($map)
                }
              
              $markdown += $content_processed |
                ConvertTo-Json |
                ConvertFrom-Json |
                Sort-Object -Property Name |
                New-MDTable -Shrink -Columns $result_columns
              
              $markdown += New-MDParagraph -Lines ""
              $markdown += New-MDParagraph -Lines "</details>"
            }
          
          $footnote = "Last updated: UTC " + (Get-Date).ToUniversalTime().ToString("u")
          $markdown += New-MDCharacterStyle -Text "$footnote" -Style Italic
          
          $markdown | Out-File -FilePath cmake_detection.md -Encoding utf8
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: cmake_detection_result_file
          path: cmake_detection.md
  upload_readme:
    name: Upload Readme
    needs: gather_cmake_detection
    uses: ./.github/workflows/update_readme.yaml
    secrets:
      github-token: ${{ secrets.GITHUB_TOKEN }}