name: Update Third-Party Repo
on:
  workflow_dispatch: {}
  schedule:
    - cron: '0 0 * * *'
defaults:
  run:
    shell: pwsh
jobs:
  update_third_party_repo:
    name: Update third-party repo
    runs-on: windows-latest
    steps:
      - name: Check third-party repo
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $result = [System.Collections.Generic.List[object]]@()
          
          # TODO: Migration
          $repolist = @(
            @{repo_name = "abseil/abseil-cpp"; display_name="abseil"},
            @{repo_name = "weidai11/cryptopp"},
            @{repo_name = "microsoft/Detours"; display_name="detours"},
            @{repo_name = "gperftools/gperftools"},
            @{repo_name = "protocolbuffers/protobuf"},
            @{repo_name = "google/snappy"},
            @{repo_name = "NVIDIA/stdexec"},
            @{repo_name = "hackers-painters/katana-parser" ; display_name="katana_parser"},
            @{repo_name = "nlohmann/json"; display_name="nlohmann_json"},
            @{repo_name = "SteamDatabase/GameTracking-CSGO"; display_name="gametracking_csgo"},
            @{repo_name = "microsoft/proxy"; display_name="proxy3"},
            @{repo_name = "microsoft/stl"; display_name="microsoft_stl"},
            @{repo_name = "alibaba/yalantinglibs"},
            @{repo_name = "AcademySoftwareFoundation/openexr"}
          )
          
          $repolist | ForEach-Object {
            $repo = $_.repo_name
            if ((-not $_.ContainsKey("display_name")) -or ($_.display_name -eq "")) {
               $_.display_name = ($_.repo_name -split '/')[1]
            }
            
            $repo_info = gh repo view $repo --json latestRelease,licenseInfo | ConvertFrom-Json
            $release = $repo_info.latestRelease
            $license = $repo_info.licenseInfo.key
            if ($license -eq "other") {
              $license = ""
            }
            
            $result.Add([ordered]@{
              Name = $_.display_name;
              RealName = $_.repo_name;
              Version = $release.tagName;
              PublishTime = ($release.publishedAt -split ' ')[0];
              License = $license
            })
          }
          
          $result | ConvertTo-Json | Out-File -FilePath result.json -Encoding utf8
          
      - name: Format to markdown
        shell: pwsh
        run: |
          Import-Module MarkdownPS
          
          $content = Get-Content -Path result.json | ConvertFrom-Json
          
          $markdown = New-MDHeader "Third-party Repos" -Level 2
          $markdown += $content | Sort-Object -Property display_name | New-MDTable -Shrink
          
          $footnote = "Last updated: UTC " + (Get-Date).ToUniversalTime().ToString("u")
          $markdown += New-MDCharacterStyle -Text "$footnote" -Style Italic
          
          $markdown | Out-File -FilePath third_party_repo.md -Encoding utf8
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: third_party_repo_result_file
          path: third_party_repo.md
          
      - name: Upload Readme
        uses: ./.github/workflows/update_readme.yaml
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
  upload_readme:
    name: Upload Readme
    needs: update_third_party_repo
    uses: ./.github/workflows/update_readme.yaml
    secrets:
      github-token: ${{ secrets.GITHUB_TOKEN }}